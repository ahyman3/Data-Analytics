dt1.pred <- predict(dt1, test_df)
#Table for the confusion matrix
print(table(dt1.pred, test$author))
#Table for the confusion matrix
print(table(dt1.pred, test_df$author))
confusionMatrix(dt1)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
#Decision tree model, basic
dt1 <- train(form = author ~., data = train_df, method = "rpart")
#Plotting the basic decision tree
rpart.plot(dt1$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
#Decision tree model, basic
dt1 <- train(form = author ~., data = train_df, method = "rpart")
#Plotting the basic decision tree
rpart.plot(dt1$finalModel)
#Predict with decision tree 1
dt1.pred <- predict(dt1, test_df)
#Table for the confusion matrix
confusionMatrix(dt1)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
#confusion matrix of the decision tree
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#confusion matrix of the decision tree
confusionMatrix(dt_prune, test)
#confusion matrix of the decision tree
confusionMatrix(dt_prune, test_df)
#Predicting the test set
dt_prune <- prune(dt1$finalModel, minSplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
?confusionMatrix
#confusion matrix of the decision tree
confusionMatrix(dt_prune)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart", tunelength = 8)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
#confusion matrix of the decision tree
confusionMatrix(dt_prune)
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#confusion matrix of the decision tree
confusionMatrix(dt_prune$finalModel)
#confusion matrix of the decision tree
confusionMatrix(dt_prune)
#Predictions of test set #2
dt2.pred <- predict(dt_prune$bestTune, test, type = "class")
#Predictions of test set #2
dt2.pred <- predict(dt_prune$finalModel, test, type = "class")
#Predictions of test set #2
dt2.pred <- predict(dt_prune$finalModel, test_df, type = "class")
#Confusion Matrix for decision tree 2
table(dt2.pred, test$author)
#Confusion Matrix for decision tree 2
table(dt2.pred, test_df$author)
?train
predict(dt_prune$finalModel, train_df, "class")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Table for the confusion matrix
confusionMatrix(dt1, norm = "none")
createDataPartition(train_df, 2, p = 0.8)
createDataPartition(train_df$author, 2, p = 0.8)
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
#Decision tree model, basic
dt1 <- train(form = author ~., data = train_df, method = "rpart")
#Plotting the basic decision tree
rpart.plot(dt1$finalModel)
#Table for the confusion matrix
table(dt1.pred, train_df$author)
#Table for the confusion matrix
table(dt1.pred, test_df$author)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control, method = "rpart", tunelength = 10)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "accuracy", tuneLength = 8)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy", tuneLength = 8)
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy", tuneLength = 10)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy", tuneLength = 10)
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, tr_control = dt_control,
method = "rpart", metric = "Accuracy")
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy", tr_control = "None")
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
?rpart
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3, xval = 5)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3, xval = 5)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3, xval = 10)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3, xval = 0)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3, xval = 0)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
#Decision tree model, basic
dt1 <- train(form = author ~., data = train_df, method = "rpart")
#Plotting the basic decision tree
rpart.plot(dt1$finalModel)
#Predict with decision tree 1
dt1.pred <- predict(dt1, test_df)
#Table for the confusion matrix
table(dt1.pred, test_df$author)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3, xval = 0)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(1111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(999)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
#Decision tree model, basic
dt1 <- train(form = author ~., data = train_df, method = "rpart")
#Plotting the basic decision tree
rpart.plot(dt1$finalModel)
#Predict with decision tree 1
dt1.pred <- predict(dt1, test_df)
#Table for the confusion matrix
table(dt1.pred, test_df$author)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy", contrasts = c("Jay", "Hamilton", "Madison"))
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
library(rpart)
library(dplyr)
library(tidyr)
library(rpart.plot)
library(matrixStats)
library(caret)
set.seed(111)
#Reading in the file
df <- read.csv("fedPapers85.csv")
#Removing the HM and disputed papers from the traiing set
train_df <- df %>% filter(!author %in% c("HM","dispt")) %>%
sample_frac(0.8)
#Dropping the undefined author levels
train_df$author <- droplevels(train_df$author)
#Get the remaining for test set
test_df <- df[!df$filename %in% train_df$filename, ] %>%
filter(!author %in% c("dispt", "HM")) %>%
select(-filename)
#Dropping the undefined author levels
test_df$author <- droplevels(test_df$author)
#get rid of the file name in the training set
train_df <- train_df %>% select(-filename)
#Creating a test set with just the disputed texts
dispt <- df %>% filter(author == "dispt")
print("Train set Author Distribution")
print(table(train_df$author))
print("Test set Author Distribution")
print(table(test_df$author))
#Decision tree model, basic
dt1 <- train(form = author ~., data = train_df, method = "rpart")
#Plotting the basic decision tree
rpart.plot(dt1$finalModel)
#Predict with decision tree 1
dt1.pred <- predict(dt1, test_df)
#Table for the confusion matrix
table(dt1.pred, test_df$author)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy", contrasts = c("Jay", "Hamilton", "Madison"))
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
?train
set.seed(111)
#changing the minimum split to be 3
dt_control <- rpart.control(minsplit = 3)
#Predicting the test set
dt_prune <- train(author ~ ., data = train_df, control = dt_control,
method = "rpart", metric = "Accuracy")
#confusion matrix of the decision tree
table(train_df$author, predict(dt_prune$finalModel, train_df, "class"))
#Plot of decision tree
rpart.plot(dt_prune$finalModel)
#Predictions of test set #2
dt2.pred <- predict(dt_prune$finalModel, test_df, type = "class")
#Confusion Matrix for decision tree 2
table(dt2.pred, test_df$author)
#Predicting the class of the disputed papers
dispt.pred <- predict(dt2, dispt, type = "class")
#Predicting the class of the disputed papers
dispt.pred <- predict(dt_prune$finalModel, dispt, type = "class")
#adding the class to the disputed data frame
dispt$prediction <- dispt.pred
#Printing prediction and file name
dispt[,c("prediction", "filename")]
#Printing the number of predictions for each of the authors
print(table(dispt.pred))
